// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'java'
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6"
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }

    configurations.all {
        // Check for updates every build
//        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
//            failOnVersionConflict()
            // prefer modules that are part of this build (multi-project or composite build) over external modules
            preferProjectModules()
            // force certain versions of dependencies (including transitive)
            //  *append new forced modules:

            force 'com.android.support:appcompat-v7:25.3.1', 'com.squareup.okhttp3:okhttp:3.8.1','com.android.support:support-annotations:25.3.1'
            //  *replace existing forced modules with new ones:
//            forcedModules = ['asm:asm-all:3.3.1']

            // add dependency substitution rules
//            dependencySubstitution {
//                substitute module('com.easygroup.ngarihealth:ngr_entrysource') with project(':ngr_entrysource')
//                substitute project(':ngr_easeui') with module('com.easygroup.ngarihealth:ngr_easeui:0.0.2-SNAPSHOT')
//            }

            // cache dynamic versions for 10 minutes
            cacheDynamicVersionsFor 24*60*60, 'seconds'
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'

        }

    }
    tasks.withType(JavaCompile){
        options.encoding = "UTF-8"
        sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
        targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }
}
clean {
    delete rootProject.buildDir
}
task customClean(type: Delete) {
    delete rootProject.buildDir
}
clean.dependsOn customClean
